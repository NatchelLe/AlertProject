{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction IncidentReportForm() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    incidentType = _useState2[0],\n    setIncidentType = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    description = _useState4[0],\n    setDescription = _useState4[1];\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"Incident Type:\", incidentType);\n    console.log(\"Description:\", description);\n  };\n  return _jsxs(\"div\", {\n    children: [_jsx(\"h2\", {\n      children: \"Create Incident Report\"\n    }), _jsxs(\"form\", {\n      onSubmit: handleSubmit,\n      children: [_jsxs(\"div\", {\n        children: [_jsx(\"label\", {\n          htmlFor: \"incidentType\",\n          children: \"Incident Type:\"\n        }), _jsx(\"input\", {\n          type: \"text\",\n          id: \"incidentType\",\n          value: incidentType,\n          onChange: function onChange(e) {\n            return setIncidentType(e.target.value);\n          },\n          required: true\n        })]\n      }), _jsxs(\"div\", {\n        children: [_jsx(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description:\"\n        }), _jsx(\"textarea\", {\n          id: \"description\",\n          value: description,\n          onChange: function onChange(e) {\n            return setDescription(e.target.value);\n          },\n          required: true\n        })]\n      }), _jsx(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      })]\n    })]\n  });\n}\nexport default IncidentReportForm;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","IncidentReportForm","_useState","_useState2","_slicedToArray","incidentType","setIncidentType","_useState3","_useState4","description","setDescription","handleSubmit","e","preventDefault","console","log","children","onSubmit","htmlFor","type","id","value","onChange","target","required"],"sources":["D:/Q-phela-UI/src/screens/IncidentReportForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction IncidentReportForm() {\r\n  // State to manage form inputs\r\n  const [incidentType, setIncidentType] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Here, you can send the form data to your backend or perform any desired actions\r\n    // For this example, we'll just log the form data to the console\r\n    console.log(\"Incident Type:\", incidentType);\r\n    console.log(\"Description:\", description);\r\n\r\n    // You can also reset the form fields or show a success message here\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create Incident Report</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"incidentType\">Incident Type:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"incidentType\"\r\n            value={incidentType}\r\n            onChange={(e) => setIncidentType(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"description\">Description:</label>\r\n          <textarea\r\n            id=\"description\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IncidentReportForm;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExC,SAASC,kBAAkBA,CAAA,EAAG;EAE5B,IAAAC,SAAA,GAAwCN,QAAQ,CAAC,EAAE,CAAC;IAAAO,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAAsCX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA3CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAGlC,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAIC,CAAC,EAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAIlBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEV,YAAY,CAAC;IAC3CS,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,WAAW,CAAC;EAG1C,CAAC;EAED,OACET,KAAA;IAAAgB,QAAA,GACElB,IAAA;MAAAkB,QAAA,EAAI;IAAsB,CAAI,CAAC,EAC/BhB,KAAA;MAAMiB,QAAQ,EAAEN,YAAa;MAAAK,QAAA,GAC3BhB,KAAA;QAAAgB,QAAA,GACElB,IAAA;UAAOoB,OAAO,EAAC,cAAc;UAAAF,QAAA,EAAC;QAAc,CAAO,CAAC,EACpDlB,IAAA;UACEqB,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,cAAc;UACjBC,KAAK,EAAEhB,YAAa;UACpBiB,QAAQ,EAAE,SAAAA,SAACV,CAAC;YAAA,OAAKN,eAAe,CAACM,CAAC,CAACW,MAAM,CAACF,KAAK,CAAC;UAAA,CAAC;UACjDG,QAAQ;QAAA,CACT,CAAC;MAAA,CACC,CAAC,EACNxB,KAAA;QAAAgB,QAAA,GACElB,IAAA;UAAOoB,OAAO,EAAC,aAAa;UAAAF,QAAA,EAAC;QAAY,CAAO,CAAC,EACjDlB,IAAA;UACEsB,EAAE,EAAC,aAAa;UAChBC,KAAK,EAAEZ,WAAY;UACnBa,QAAQ,EAAE,SAAAA,SAACV,CAAC;YAAA,OAAKF,cAAc,CAACE,CAAC,CAACW,MAAM,CAACF,KAAK,CAAC;UAAA,CAAC;UAChDG,QAAQ;QAAA,CACT,CAAC;MAAA,CACC,CAAC,EACN1B,IAAA;QAAQqB,IAAI,EAAC,QAAQ;QAAAH,QAAA,EAAC;MAAM,CAAQ,CAAC;IAAA,CACjC,CAAC;EAAA,CACJ,CAAC;AAEV;AAEA,eAAef,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}