{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["D:/My Documents/Q-phela-UI/src/screens/MyMap.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { MapContainer, TileLayer, Marker, Popup, ZoomControl } from 'react-leaflet';\r\n// import \"leaflet/dist/leaflet.css\";\r\n// import L from 'leaflet';\r\n// import Heading from \"../components/landing-screen/Heading\";\r\n\r\n// function MyMap() {\r\n//   // Define initial coordinates for the map center\r\n//   const initialPosition = [51.505, -0.09];\r\n\r\n//   // Define a state variable to track the target coordinates for navigation\r\n//   const [targetPosition, setTargetPosition] = useState(null);\r\n\r\n//   // Define a state variable to store the current location coordinates\r\n//   const [currentLocation, setCurrentLocation] = useState(initialPosition);\r\n\r\n//   // Function to handle navigation\r\n//   const startNavigation = () => {\r\n//     // Replace this with your navigation logic\r\n//     // Example: Fetch the target coordinates from your navigation system\r\n//     // For demonstration purposes, we'll use a hardcoded value here\r\n//     const targetCoordinates = [52.0, -0.1];\r\n//     setTargetPosition(targetCoordinates);\r\n//   };\r\n\r\n//   // Function to handle zoom-in\r\n//   const zoomIn = () => {\r\n//     setZoom((prevZoom) => prevZoom + 1);\r\n\r\n//     // When zooming in, center the map on the current location\r\n//     setMapCenter(currentLocation);\r\n//   };\r\n\r\n//   // Function to handle zoom-out\r\n//   const zoomOut = () => {\r\n//     setZoom((prevZoom) => prevZoom - 1);\r\n//   };\r\n\r\n//   // Function to get the current location\r\n//   const getCurrentLocation = () => {\r\n//     navigator.geolocation.getCurrentPosition((position) => {\r\n//       const { latitude, longitude } = position.coords;\r\n//       setCurrentLocation([latitude, longitude]);\r\n//     });\r\n//   };\r\n\r\n//   // Fetch the current location when the component mounts\r\n//   useEffect(() => {\r\n//     getCurrentLocation();\r\n//   }, []);\r\n\r\n//   // State variable to manage the zoom level\r\n//   const [zoom, setZoom] = useState(13);\r\n\r\n//   // State variable to manage the map center\r\n//   const [mapCenter, setMapCenter] = useState(initialPosition);\r\n\r\n//   // State variable to manage the search query\r\n//   const [searchQuery, setSearchQuery] = useState('');\r\n\r\n//   // Handle changes in the search input\r\n//   const handleSearchInputChange = (event) => {\r\n//     setSearchQuery(event.target.value);\r\n//   };\r\n\r\n//   // Handle search button click\r\n//   const handleSearchButtonClick = () => {\r\n//     // Call a function to perform location search based on the searchQuery\r\n//     // You can implement this function to fetch location coordinates using a geocoding service\r\n//     // For simplicity, let's assume it sets the map center to a hardcoded location\r\n//     setMapCenter([52.0, -0.1]); // Replace with actual coordinates from the search\r\n//   };\r\n\r\n//   // Define a custom icon for the current location marker\r\n//   const customerIcon = new L.Icon({\r\n//     iconUrl: 'https://img.icons8.com/?size=48&id=13800&format=png', // Replace with your custom icon URL\r\n//     iconSize: [32, 32], // Adjust the size as needed\r\n//   });\r\n\r\n//   return (\r\n//     <div>\r\n//       <Heading /> {/* Include the Heading component here */}\r\n//       <div>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Search location\"\r\n//           value={searchQuery}\r\n//           onChange={handleSearchInputChange}\r\n//         />\r\n//         <button onClick={handleSearchButtonClick}>Search</button>\r\n//       </div>\r\n//       <button onClick={startNavigation}>Start Trip</button>\r\n      \r\n//       <button onClick={getCurrentLocation}>Route recommendation</button>\r\n//       <MapContainer\r\n//         center={mapCenter} // Use mapCenter as the center of the map\r\n//         zoom={zoom}\r\n//         style={{\r\n//           height: 'calc(100vh - 40px)', // Adjust the height to make room for the search box\r\n//           width: '100%',\r\n//           position: 'relative',\r\n//         }}\r\n//       >\r\n//         <TileLayer\r\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//           attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//         />\r\n//         {targetPosition && <Marker position={targetPosition}><Popup>Navigation Target</Popup></Marker>}\r\n//         <Marker position={currentLocation} icon={customerIcon}><Popup>Current Location</Popup></Marker>\r\n//         <ZoomControl position=\"bottomright\" />\r\n//       </MapContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default MyMap;\r\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}