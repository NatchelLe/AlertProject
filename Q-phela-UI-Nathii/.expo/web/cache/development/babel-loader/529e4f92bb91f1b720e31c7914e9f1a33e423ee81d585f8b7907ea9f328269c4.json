{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Heading from \"../components/landing-screen/Heading\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { setBackgroundColor } from \"../components/global/BackgroundColor\";\nimport { Colors } from \"../assets/Colors\";\nimport Modal from 'react-native-modal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ProfileScreen = function ProfileScreen() {\n  var _useState = useState('John Doe'),\n    _useState2 = _slicedToArray(_useState, 2),\n    name = _useState2[0],\n    setName = _useState2[1];\n  var _useState3 = useState('johndoe'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    username = _useState4[0],\n    setUsername = _useState4[1];\n  var _useState5 = useState('johndoe@example.com'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    email = _useState6[0],\n    setEmail = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isEditing = _useState8[0],\n    setIsEditing = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isModalVisible = _useState10[0],\n    setIsModalVisible = _useState10[1];\n  useEffect(function () {\n    setBackgroundColor(Colors.darkGray);\n  }, []);\n  var animatedValue = new Animated.Value(0);\n  var animateText = function animateText() {\n    Animated.sequence([Animated.timing(animatedValue, {\n      toValue: 1,\n      duration: 1000,\n      useNativeDriver: false\n    }), Animated.timing(animatedValue, {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: false\n    })]).start();\n  };\n  var saveChanges = function saveChanges() {\n    setIsEditing(false);\n    setIsModalVisible(true);\n    animateText();\n  };\n  var closeModal = function closeModal() {\n    setIsModalVisible(false);\n  };\n  var data = [{\n    label: 'Name',\n    value: name\n  }, {\n    label: 'Username',\n    value: username\n  }, {\n    label: 'Email',\n    value: email\n  }];\n  return _jsx(SafeAreaView, {\n    style: styles.root,\n    children: _jsxs(View, {\n      style: styles.viewStyle,\n      children: [_jsx(View, {\n        style: {\n          marginBottom: 41\n        },\n        children: _jsx(Image, {})\n      }), _jsxs(View, {\n        style: [styles.viewStyle, {\n          gap: 30\n        }],\n        children: [_jsx(Formik, {\n          validationSchema: loginValidationSchema,\n          initialValues: {\n            username: \"\",\n            password: \"\"\n          },\n          onSubmit: function onSubmit(values) {\n            return loginFunction(values);\n          },\n          children: function children(_ref) {\n            var values = _ref.values,\n              handleChange = _ref.handleChange,\n              isValid = _ref.isValid,\n              errors = _ref.errors,\n              handleBlur = _ref.handleBlur,\n              handleSubmit = _ref.handleSubmit;\n            return _jsxs(_Fragment, {\n              children: [_jsx(InputComponent, {\n                name: \"username\",\n                onChangeText: handleChange(\"username\"),\n                onBlur: handleBlur(\"username\"),\n                value: values.username,\n                placeholder: \"Username\",\n                mode: \"text\",\n                errors: errors.username\n              }), _jsx(InputComponent, {\n                name: \"password\",\n                errors: errors.password,\n                placeholder: \"Password\",\n                mode: \"text\",\n                secure: true,\n                onChangeText: handleChange(\"password\"),\n                onBlur: handleBlur(\"password\"),\n                value: values.password\n              }), _jsx(RoundedButton, {\n                btnColor: Colors.black,\n                title: \"Login\",\n                isDisabled: isValid,\n                onPressedFun: handleSubmit\n              })]\n            });\n          }\n        }), _jsxs(View, {\n          children: [_jsxs(View, {\n            style: {\n              flexDirection: \"row\"\n            },\n            children: [_jsx(Pressable, {\n              onPress: function onPress() {\n                return navigation.navigate(\"Register\");\n              },\n              children: _jsx(Text, {\n                style: [styles.text, {\n                  color: Colors.blue,\n                  fontWeight: \"bold\"\n                }],\n                children: \"Register\"\n              })\n            }), _jsx(Text, {\n              style: [styles.text],\n              children: \" your account\"\n            })]\n          }), _jsx(Pressable, {\n            style: {\n              marginTop: 5\n            },\n            onPress: function onPress() {\n              return navigation.navigate(\"ForgotPassword\");\n            },\n            children: _jsx(Text, {\n              style: [styles.text, {\n                color: Colors.blue,\n                textAlign: \"center\"\n              }],\n              children: \"forgot password\"\n            })\n          })]\n        })]\n      })]\n    })\n  });\n};\nexport default ProfileScreen;","map":{"version":3,"names":["React","useState","useEffect","Heading","View","Text","Image","SafeAreaView","TextInput","TouchableOpacity","StyleSheet","FlatList","Animated","setBackgroundColor","Colors","Modal","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ProfileScreen","_useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","username","setUsername","_useState5","_useState6","email","setEmail","_useState7","_useState8","isEditing","setIsEditing","_useState9","_useState10","isModalVisible","setIsModalVisible","darkGray","animatedValue","Value","animateText","sequence","timing","toValue","duration","useNativeDriver","start","saveChanges","closeModal","data","label","value","style","styles","root","children","viewStyle","marginBottom","gap","Formik","validationSchema","loginValidationSchema","initialValues","password","onSubmit","values","loginFunction","_ref","handleChange","isValid","errors","handleBlur","handleSubmit","InputComponent","onChangeText","onBlur","placeholder","mode","secure","RoundedButton","btnColor","black","title","isDisabled","onPressedFun","flexDirection","Pressable","onPress","navigation","navigate","text","color","blue","fontWeight","marginTop","textAlign"],"sources":["D:/My Documents/Q-phela-UI-Nathii (2)/Q-phela-UI-Nathii/Q-phela-UI-Nathii/src/screens/ProfileScreen.js"],"sourcesContent":["// ProfileScreen.js\nimport React, { useState, useEffect } from 'react';\nimport Heading from '../components/landing-screen/Heading';\nimport { View, Text, Image,SafeAreaView, TextInput, TouchableOpacity, StyleSheet, FlatList, Animated } from 'react-native';\nimport { setBackgroundColor } from '../components/global/BackgroundColor';\nimport { Colors } from \"../assets/Colors\";\nimport Modal from 'react-native-modal';\n\nconst ProfileScreen = () => {\n  const [name, setName] = useState('John Doe');\n  const [username, setUsername] = useState('johndoe');\n  const [email, setEmail] = useState('johndoe@example.com');\n  const [isEditing, setIsEditing] = useState(false);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  useEffect(() => {\n    // Call setBackgroundColor with the desired color\n    setBackgroundColor(Colors.darkGray);\n  }, []);\n\n  const animatedValue = new Animated.Value(0);\n\n  const animateText = () => {\n    Animated.sequence([\n      Animated.timing(animatedValue, {\n        toValue: 1,\n        duration: 1000, // Increase the size in 1 second\n        useNativeDriver: false,\n      }),\n      Animated.timing(animatedValue, {\n        toValue: 0,\n        duration: 1000, // Decrease the size in 1 second\n        useNativeDriver: false,\n      }),\n    ]).start();\n  };\n\n  const saveChanges = () => {\n    setIsEditing(false);\n    setIsModalVisible(true);\n    animateText(); // Start the animation when saving changes\n    // You can implement code here to save the edited details to your backend or storage.\n  };\n\n  const closeModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const data = [\n    { label: 'Name', value: name },\n    { label: 'Username', value: username },\n    { label: 'Email', value: email },\n  ];\n\n    return(\n      <SafeAreaView style={styles.root}>\n      <View style={styles.viewStyle}>\n        <View style={{ marginBottom: 41 }}>\n          <Image />\n        </View>\n        <View style={[styles.viewStyle, { gap: 30 }]}>\n          <Formik\n            validationSchema={loginValidationSchema}\n            initialValues={{ username: \"\", password: \"\" }}\n            onSubmit={(values) => \n              loginFunction(values)\n            }\n          >\n            {({\n              values,\n              handleChange,\n              isValid,\n              errors,\n              handleBlur,\n              handleSubmit,\n            }) => (\n              <>\n                <InputComponent\n                  name=\"username\"\n                  onChangeText={handleChange(\"username\")}\n                  onBlur={handleBlur(\"username\")}\n                  value={values.username}\n                  placeholder=\"Username\"\n                  mode=\"text\"\n                  errors={errors.username}\n                />\n\n                <InputComponent\n                  name=\"password\"\n                  errors={errors.password}\n                  placeholder=\"Password\"\n                  mode=\"text\"\n                  secure={true}\n                  onChangeText={handleChange(\"password\")}\n                  onBlur={handleBlur(\"password\")}\n                  value={values.password}\n                />\n                <RoundedButton\n                  btnColor={Colors.black}\n                  title=\"Login\"\n                  isDisabled={isValid}\n                  onPressedFun={handleSubmit}\n                />\n              </>\n            )}\n          </Formik>\n          <View>\n            <View style={{ flexDirection: \"row\" }}>\n              <Pressable onPress={() => navigation.navigate(\"Register\")}>\n                <Text\n                  style={[\n                    styles.text,\n                    { color: Colors.blue, fontWeight: \"bold\" },\n                  ]}\n                >\n                  Register\n                </Text>\n              </Pressable>\n              <Text style={[styles.text]}> your account</Text>\n            </View>\n            <Pressable\n              style={{ marginTop: 5 }}\n              onPress={() => navigation.navigate(\"ForgotPassword\")}\n            >\n              <Text\n                style={[\n                  styles.text,\n                  { color: Colors.blue, textAlign: \"center\" },\n                ]}\n              >\n                forgot password\n              </Text>\n            </Pressable>\n          </View>\n        </View>\n      </View>\n    </SafeAreaView>\n    )};\n\n    export default ProfileScreen;\n      \n\n    \n\n\n\n\n  // return (\n//     <View style={styles.container}>\n//       <Heading />\n//       <Image\n//         //source={require('./profile.jpg')} // Your profile picture\n//         style={styles.profileImage}\n//       />\n//       <FlatList\n//         data={data}\n//         keyExtractor={(item) => item.label}\n//         renderItem={({ item }) => (\n//           <View style={styles.infoRow}>\n//             <Text style={styles.label}>{item.label}:</Text>\n//             {isEditing ? (\n//               <TextInput\n//                 style={styles.editInput}\n//                 value={item.value}\n//                 onChangeText={(text) => {\n//                   if (item.label === 'Name') setName(text);\n//                   if (item.label === 'Username') setUsername(text);\n//                   if (item.label === 'Email') setEmail(text);\n//                 }}\n//                 placeholder={`Enter ${item.label}`}\n//                 placeholderTextColor=\"grey\"\n//               />\n//             ) : (\n//               <Animated.Text style={[styles.value, { fontSize: animatedValue.interpolate({\n//                 inputRange: [0, 1],\n//                 outputRange: [16, 20], // Change the font size during the animation\n//               }) }]}>{item.value}</Animated.Text>\n//             )}\n//           </View>\n//         )}\n//       />\n//       {isEditing ? (\n//         <TouchableOpacity style={styles.editButton} onPress={saveChanges}>\n//           <Text style={styles.editButtonText}>Save Changes</Text>\n//         </TouchableOpacity>\n//       ) : (\n//         <TouchableOpacity\n//           style={styles.editButton}\n//           onPress={() => setIsEditing(true)}\n//         >\n//           <Text style={styles.editButtonText}>Edit Profile</Text>\n//         </TouchableOpacity>\n//       )}\n//       <Modal isVisible={isModalVisible}>\n//         <View style={styles.modalContent}>\n//           <Text style={styles.modalText}>Profile Updated</Text>\n//           <TouchableOpacity onPress={closeModal}>\n//             <Text style={styles.closeModalText}>Close</Text>\n//           </TouchableOpacity>\n//         </View>\n//       </Modal>\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     alignItems: 'center',\n//     justifyContent: 'center',\n   \n//   },\n//   profileImage: {\n//     width: 150,\n//     height: 150,\n//     borderRadius: 75,\n//     marginBottom: 20,\n//   },\n//   infoRow: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     marginBottom: 10,\n//     borderWidth: 1,\n//     borderColor: 'lightgrey',\n//     padding: 10,\n//     borderRadius: 5,\n//   },\n//   label: {\n//     width: 100,\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//   },\n//   value: {\n//     flex: 1,\n//     fontSize: 16,\n//     color: 'gray',\n//   },\n//   editInput: {\n//     flex: 1,\n//     height: 40,\n//     backgroundColor: 'white',\n//     borderColor: 'grey',\n//     borderWidth: 1,\n//     borderRadius: 5,\n//     paddingLeft: 10,\n//     color: 'grey',\n//   },\n//   editButton: {\n//     backgroundColor: 'black',\n//     padding: 10,\n//     borderRadius: 5,\n//     marginBottom:50,\n//   },\n//   editButtonText: {\n//     color: 'white',\n//     fontSize: 16,\n//     textAlign: 'center',\n//   },\n//   modalContent: {\n//     backgroundColor: 'white',\n//     padding: 20,\n//     borderRadius: 10,\n//     alignItems: 'center',\n//   },\n//   modalText: {\n//     fontSize: 20,\n//   },\n//   closeModalText: {\n//     color: 'blue',\n//     marginTop: 10,\n//   },\n// });\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}